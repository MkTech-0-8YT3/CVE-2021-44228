package com.log4shell.web;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
public class LogController {

    private static final Logger VULN_LOGGER = LogManager.getLogger(LogController.class);

    public LogController() {
        //Below line can be removed/commented if older Java version is used (i.e. java 8u181)
        System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase", "true");
    }

    @PostMapping("/logAction")
    public String logPostAction(@RequestHeader Map<String, String> headers, @RequestParam String payload) {
        logRequestHeaders(headers);
        VULN_LOGGER.error(payload);
        return "Logged: " + payload + "<br/><a href=\"../\">Go back</a>";
    }

    @GetMapping("/logGetHeaders")
    public String logGetAction(@RequestHeader Map<String, String> headers) {
        return logRequestHeaders(headers);
    }

    @PutMapping("/logPut")
    public String logPutAction(@RequestHeader Map<String, String> headers, @RequestBody String body) {
        return logRequestHeaders(headers) + logRequestBody(body);
    }

    @DeleteMapping("/logDelete")
    public String logDeleteAction(@RequestHeader Map<String, String> headers, @RequestBody String body) {
        return logRequestHeaders(headers) + logRequestBody(body);
    }

    private String logRequestBody(String body) {
        VULN_LOGGER.info(body);
        return "Body: " + body + "\nLogged request body!\n";
    }

    private String logRequestHeaders(Map<String, String> headers) {
        StringBuilder stringBuilder = new StringBuilder();
        headers.forEach((key, value) -> {
            String logString = String.format("Header '%s' = %s", key, value);
            stringBuilder.append(logString).append("\n");
            VULN_LOGGER.info(logString);
        });
        stringBuilder.append("Logged request headers!\n");
        return stringBuilder.toString();
    }
}
